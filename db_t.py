
"""DBMS期末報告_v2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W2OqoP2Nke4PsD_joluZEn_xgfuTS-fR

# Connects to a SQL database using pymssql
"""

import pymysql
from datetime import datetime

# 獲取當前日期和時間
current_date = datetime.now()

# 格式化日期為字符串
formatted_date = current_date.strftime("%Y/%m/%d %H:%M")
print("今天的日期是：", formatted_date)

"""## 記得要換密碼"""

# 数据库参数设置
db_settings = {
    "host": "127.0.0.1",
    "port": 3306,
    "user": "root",
    "password": "Kevin306051",
    "db": "hospital",  # 假设你的数据库名为 hospital
    "charset": "utf8"
}

"""# Def

## 單一使用Def
"""

user_pass={
    "doc":"doc_pass",
    "pur":"pur_pass",
    "adm":"adm_pass"
}

def 登入登出(user_name, user_password):
    if user_pass[user_name]==user_password:
        return True
    else:
        return False

#1. def 更新資料: 刪除/更新/加總
def 更新資料(sheet, primary_id, operation, column='Amount', new_item=''):
    id_column_name = 'Employee_ID' if sheet in ['administration staff', 'doctor', 'buyer'] else f'{sheet.capitalize()}_ID'
    try:
        conn = pymysql.connect(**db_settings)
        with conn.cursor() as cursor:
            if operation == 'update':
                update_sql = f"UPDATE `{sheet}` SET {column} = %s WHERE {id_column_name} = %s"
                cursor.execute(update_sql, (new_item, primary_id))
                print(f"Updated {column} to {new_item} for ID {primary_id}")

            elif operation == 'insert into':
                insert_sql = f"INSERT INTO {sheet} ({column}) VALUES (%s)"
                cursor.execute(insert_sql, (new_item,))
                print(f"Inserted {column} as {new_item} for ID {primary_id}")

            elif operation == 'delete':
                if sheet == 'inventory':
                    select_sql_1 = f"SELECT Operation_ID FROM operation WHERE {id_column_name} = %s"
                    select_sql_2 = f"SELECT Purchaselist_ID FROM purchaselist WHERE {id_column_name} = %s"
                    cursor.execute(select_sql_1, (primary_id,))
                    myres_1 = cursor.fetchall()
                    for x in myres_1:
                        更新資料('operation', x[0], 'delete')
                    cursor.execute(select_sql_2, (primary_id,))
                    myres_2 = cursor.fetchall()
                    for x in myres_2:
                        更新資料('purchaselist', x[0], 'delete')
                    delete_sql = f"DELETE FROM `{sheet}` WHERE {id_column_name} = %s"
                    cursor.execute(delete_sql, (primary_id,))
                elif sheet in ["doctor", "patient", "buyer"]:
                    select_sql = f"SELECT appointment_ID FROM appointment WHERE {id_column_name} = %s" if sheet != "buyer" else f"SELECT Purchaselist_ID FROM purchaselist WHERE {id_column_name} = %s"
                    cursor.execute(select_sql, (primary_id,))
                    myres = cursor.fetchall()
                    for x in myres:
                        更新資料('appointment' if sheet != 'buyer' else 'purchaselist', x[0], 'delete')
                    delete_sql = f"DELETE FROM `{sheet}` WHERE {id_column_name} = %s"
                    cursor.execute(delete_sql, (primary_id,))
                else:
                    delete_sql = f"DELETE FROM `{sheet}` WHERE {id_column_name} = %s"
                    cursor.execute(delete_sql, (primary_id,))
                print(f"Deleted record with ID {primary_id}")

            elif operation == 'addup':
                addup_sql = f"UPDATE `{sheet}` SET {column} = {column} + %s WHERE {id_column_name} = %s"
                cursor.execute(addup_sql, (new_item, primary_id))
                print(f"Added {new_item} to existing {column} for ID {primary_id}")

            elif operation == 'query':
                query_sql = f"SELECT {column} FROM `{sheet}` WHERE {id_column_name} = %s"
                cursor.execute(query_sql, (primary_id,))
                result = cursor.fetchone()
                if result:
                    return result[0]
                else:
                    print(f"No record found for ID {primary_id}")

            conn.commit()

    except Exception as ex:
        print(f"Error: {ex}")
        if conn:
            conn.rollback()

    finally:
        if conn:
            conn.close()

#1. def 更新資料: 刪除/更新/加總
def 顯示資料(sheet):
    try:
        # Connect to the database
        conn = pymysql.connect(**db_settings)
        with conn.cursor() as cursor:
            # Prepare the SQL query statement
            query_sql = f"SELECT * FROM `{sheet}`"
            cursor.execute(query_sql)
            result = cursor.fetchall()
            if result:
                for row in result:
                    print(row)
            else:
                print(f"No record found")
            conn.commit()
    except Exception as ex:
        print(f"发生错误：{ex}")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()

顯示資料('inventory')

def 插入資料(sheet, data_dict):
    """
    Inserts data into a specified table.

    Parameters:
    - sheet: the name of the table (str)
    - data_dict: a dictionary where keys are column names and values are the data to be inserted (dict)
    """
    if sheet in ['administration staff','doctor','buyer']:
               id_column_name ='Employee_ID'

    else:
        sheet_capitalized = sheet.capitalize()
        id_column_name = f'{sheet_capitalized}_ID'


    try:
        # Connect to the database
        conn = pymysql.connect(**db_settings)
        print("连接成功！")

        with conn.cursor() as cursor:
            # Retrieve the last Inventory_ID and increment it
            cursor.execute(f"SELECT MAX(`Number`) FROM `{sheet}`")
            fetch_result = cursor.fetchone()  # Fetch the result
            max_id = fetch_result[0]
            if max_id is not None:
                next_id = max_id + 1
            else:
                next_id = 1  # Start from 1 if no IDs are present yet

            print("max_id:{} next_id:{}".format(max_id,next_id))
            # Update the 'Number' in data_dict for consistent numbering
            data_dict[id_column_name] = sheet[0:3].capitalize()+str(next_id)
            data_dict['Number'] = next_id
            print(data_dict)

            # Prepare the SQL insert statement
            columns = ', '.join(f"`{column}`" for column in data_dict.keys())
            placeholders = ', '.join(['%s'] * len(data_dict))
            insert_sql = f"INSERT INTO `{sheet}` ({columns}) VALUES ({placeholders})"

            # Execute the SQL insert statement
            cursor.execute(insert_sql, tuple(data_dict.values()))
            #print(f"Inserted data into {sheet}: {data_dict}")

            # Commit the transaction
            conn.commit()
            print("插入操作成功")

    except Exception as ex:
        print(f"发生错误：{ex}")
        if conn:
            conn.rollback()  # Roll back in case of an error

    finally:
        # Ensure the connection is always closed
        if conn:
            conn.close()

"""sheet  =     input("请输入要更新的表格名稱: ")
primary_id = input("请输入要更新的primary_id: ")
new_amount = input("请输入新的Amount值: ")
operation='insert'

## 合併使用Def
"""

def 購買材料(Inv_id,Purchaser,Unit_Price,Purchase_amount):
    data_to_insert = {
    'Employee_ID' :  Purchaser,
    'Inventory_ID':  Inv_id,
    'Unit_Price'  :  Unit_Price,
    'Amount'      :  Purchase_amount,
    'Total_Price' :  Unit_Price*Purchase_amount
    }
    插入資料('purchaselist', data_to_insert)
    Old_amount=更新資料('inventory',Inv_id,'query','Amount')
    更新資料('inventory',Inv_id,'addup','Amount',Purchase_amount)
    New_amount=更新資料('inventory',Inv_id,'query','Amount')
    print('原始數量: {} ,購買後數量: {}'.format(Old_amount,New_amount))

def 更改材料(Pur_id,operation,Unit_Price=0,Purchase_amount=0):
    #buying 3 to buying 2
    Inv_id            =更新資料('purchaselist',Pur_id,'query','Inventory_ID')
    OldPurchase_amount=更新資料('purchaselist',Pur_id,'query','Amount')
    print('Inventory_ID{}, Amount{}'.format(Inv_id,OldPurchase_amount))

    if operation=='update':
        更新資料('purchaselist',Pur_id,'update', 'Unit_Price',Unit_Price)
        更新資料('purchaselist',Pur_id,'update', 'Amount',Purchase_amount)
        更新資料('purchaselist',Pur_id,'update', 'Total_Price',Unit_Price*Purchase_amount)
    elif operation=='delete':
        更新資料('purchaselist',Pur_id,'delete')

    if OldPurchase_amount is None:
        OldPurchase_amount = 0

    Dif_Purchase_amount=(Purchase_amount-int(OldPurchase_amount))

    Old_amount=更新資料('inventory',Inv_id,'query','Amount')
    更新資料('inventory',Inv_id,'addup','Amount',Dif_Purchase_amount)
    New_amount=更新資料('inventory',Inv_id,'query','Amount')
    print('原始數量: {} ,購買後數量: {}'.format(Old_amount,New_amount))

#掛號資料插入
def 掛號資料插入(Patient_ID,Doctor_ID,Fuction,Time=formatted_date):
    #function= diagnose or operation
    try:
        # Connect to the database
        conn = pymysql.connect(**db_settings)
        print("连接成功！")
        with conn.cursor() as cursor:
                # Retrieve the last Inventory_ID and increment it
                cursor.execute(f"SELECT MAX(`Number`) FROM `{Fuction}`")
                fetch_result = cursor.fetchone()  # Fetch the result
                max_id = fetch_result[0]
                if max_id is not None:
                    next_id = max_id + 1
                else:
                    next_id = 1  # Start from 1 if no IDs are present yet
                data= Fuction[0:3].capitalize()+str(next_id)

                data_to_insert = {
                     'Patient_ID': Patient_ID,
                     'Employee_ID':Doctor_ID,
                     'Dia_Ope':data,
                     'Time':Time
                }
                插入資料('appointment', data_to_insert)

                data_to_insert = {
                    'Inventory_ID':'TBD',
                    'Amount':0,
                }
                插入資料(Fuction, data_to_insert)

    except Exception as ex:
        print(f"发生错误：{ex}")
        if conn:
            conn.rollback()  # Roll back in case of an error

    finally:
        # Ensure the connection is always closed
        if conn:
            conn.close()

def 刪除掛號資料(App_ID):
    try:
        # Connect to the database
        conn = pymysql.connect(**db_settings)
        print("连接成功！")
        Dia_Ope=更新資料('appointment',App_ID,'query','Dia_Ope')

        with conn.cursor() as cursor:
            # 刪除掛號資料
            cursor.execute(f"DELETE FROM `appointment` WHERE `Appointment_ID` = '{App_ID}'")
            # 根據掛號資料ID刪除相關的 dia 和 ope 資料
            if Dia_Ope[:3]=='Dia':
                Function ='diagnose'

            elif Dia_Ope[:3]=='Ope':
                Function ='operation'

            Function_capitalized = Function.capitalize()
            id_Function = f'{Function_capitalized}_ID'
            print('id_Function: {} ,PrimaryKey: {} '.format(id_Function,Dia_Ope))
            cursor.execute(f"DELETE FROM `{Function}` WHERE `{id_Function}` = '{Dia_Ope}'")

            # 如果成功刪除資料，提交事務
            conn.commit()

    except Exception as ex:
        print(f"发生错误：{ex}")
        if conn:
            conn.rollback()  # Roll back in case of an error

    finally:
        # Ensure the connection is always closed
        if conn:
            conn.close()

"""# Function

## FEE and Payment Records
"""

""" print(登入登出("doc",'doc_pass'))
登入登出("doc",'doc_pass_wrong')

#購買材料會同時動到Inventory 跟Fee
購買材料('Inv1','Buy1',2,50)
購買材料('Inv2','Buy3',5,50)

#更改材料的單位金額和數量
更改材料('Pur11','update',5,80)

#刪除的單位金額和數量
更改材料('Pur18','delete')

#查詢FEE AND Function
更新資料('purchaselist','Pur2','query','Amount')

更新資料('purchaselist','Pur2202','query','Amount')

## Inventory Records

#檢查連動
operation/diagonose
purchaselist


# 新增Inventory:
data_to_insert = {
    'Amount': 30,
    'Consumables': '水管'
}
插入資料('inventory', data_to_insert)
插入資料('inventory', data_to_insert)

#更新
更新資料('inventory','Inv20','update','Consumables','人造血管')

#刪除
更新資料('inventory','Inv21','delete')

#查詢
更新資料('inventory','Inv20','query','Amount')



#病患資料更換
更新資料('patient','pat1','update','FName','Whale')

# 病患資料插入:
data_to_insert = {
    'FName': 'Lord',
    'LName': 'Stark',
    'Birth Date':'03/03/1996',
    'Phone Number':'8733458922',
    'Authorize':'TRUE'
}
插入資料('patient', data_to_insert)

#病患資料刪除
更新資料('patient','Pat3','delete')

#病患資料
更新資料('patient','Pat2','query','Fname')



#掛號資料更換
更新資料('appointment','app1','update','Time','TBD')

#掛號資料插入
掛號資料插入('Pat21','Doc3','diagnose')
掛號資料插入('Pat1','Doc2','operation')

#掛號資料刪除_Diagnose
刪除掛號資料('App3')

#掛號資料刪除_Operation
刪除掛號資料('App4')

#掛號資料查詢
更新資料('appointment','App2','query','Time')



# Buyer插入:
data_to_insert = {
    'FName': 'Lion',
    'LName': 'Stark'
}
插入資料('buyer', data_to_insert)
# Buyer修改:
更新資料('buyer','Bur2','Will','update','FName')
# Buyer 刪除
更新資料('buyer','Bur4','Will','delete','FName')

# Adm插入:
data_to_insert = {
    'FName': 'Lad',
    'LName': 'Snows'
}
插入資料('administration staff', data_to_insert)

# Doctor插入:
data_to_insert = {
    'FName': 'La',
    'LName': 'Snow'
}
插入資料('doctor', data_to_insert)

更新資料('inventory','Inv16','delete')

更新資料('doctor','doc2','delete')

更新資料('patient','Inv16','delete') """